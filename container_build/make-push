#!/usr/bin/env bash
set -euETo pipefail
shopt -s inherit_errexit

NAME=${NAME:-terrain-model}
REPO=${REPO:-ghcr.io/cseelye}
TAG=${TAG-latest}
CACHE_REPO=${CACHE_REPO:-ghcr.io/cseelye}
PUSH_CACHE=${PUSH_CACHE:-0}
LOAD=${LOAD:-0}

if [[ -n ${REPO} ]]; then
    IMAGE_NAME=${REPO}/${NAME}
else
    IMAGE_NAME=${NAME}
fi

cache_type="registry"
if [[ -n ${CACHE_REPO} ]]; then
    CACHE_IMAGE_NAME=${CACHE_REPO}/${NAME}
    if [[ "${REPO}" == "local" ]]; then
        cache_type="registry,registry.insecure=true"
    fi
elif [[ -n ${REPO} ]]; then
    CACHE_IMAGE_NAME=${REPO}:${NAME}
else
    echo "CACHE_REPO and REPO cannot both be empty"
    exit 1
fi

# This build process uses buildx remote layer caching, so docker must be logged into the registry being used with permissions to pull and push
cache_to=""

# Build cache-from args so each build can pull from every cache layer
# Normally this is only useful when the cache is incomplete
cache_from=""
for target in $(perl -ne 'print "$1\n" if /FROM \S+ AS (\S+)/s' Dockerfile); do
    cache_from="${cache_from} \
        --cache-from ref=${CACHE_IMAGE_NAME}.${target}-buildcache,type=${cache_type}"
done

for target in runtime dev; do

    fullname=${IMAGE_NAME}.${target}:${TAG}
    if [[ ${target} == "runtime" ]]; then
        fullname=${IMAGE_NAME}:${TAG}
    fi
    if [[ ${PUSH_CACHE} -eq 1 ]]; then
        cache_to="--cache-to ref=${CACHE_IMAGE_NAME}.${target}-buildcache,mode=max,type=${cache_type}"
    fi
    (
    set -x
    docker buildx build \
        --pull \
        --push \
        ${cache_from} \
        ${cache_to} \
        --progress plain \
        --target ${target} \
        --tag ${fullname} \
        .
    ) 2>&1 | sed -u 's/^/'${target}' | /'
    if [[ ${LOAD} -eq 1 ]]; then
    (
    set -x
    docker buildx build \
        --load \
        ${cache_from} \
        --progress plain \
        --target ${target} \
        --tag ${fullname} \
        .
    ) 2>&1 | sed -u 's/^/'${target}' | /'
    fi
done
