#!/usr/bin/env bash
set -euETo pipefail
shopt -s inherit_errexit

NAME=${NAME:-terrain-model}
REPO=${REPO:-ghcr.io/cseelye}
TAG=${TAG-latest}
CACHE_REPO=${CACHE_REPO:-ghcr.io/cseelye}
LOAD=${LOAD:-0}
PUSH_CACHE=${PUSH_CACHE:-0}

if [[ -n ${REPO} ]]; then
    IMAGE_NAME=${REPO}/${NAME}
else
    IMAGE_NAME=${NAME}
fi

cache_type="registry"
if [[ -n ${CACHE_REPO} ]]; then
    CACHE_IMAGE_NAME=${CACHE_REPO}/${NAME}
    if [[ "${REPO}" == "local" ]]; then
        cache_type="registry,registry.insecure=true"
    fi
elif [[ -n ${REPO} ]]; then
    CACHE_IMAGE_NAME=${REPO}:${NAME}
else
    echo "CACHE_REPO and REPO cannot both be empty"
    exit 1
fi

load=""
if [[ ${LOAD} -eq 1 ]]; then
    load="--load"
fi


# This build process uses buildx remote layer caching, so docker must be logged into the registry being used with permissions to push
cache_to=""

# Explicitly build/tag the intermediate layers
for target in base build_py_modules build_gdal build_blender; do
(
    if [[ ${PUSH_CACHE} -eq 1 ]]; then
        cache_to="--cache-to ref=${CACHE_IMAGE_NAME}.${target}-buildcache,mode=max,type=${cache_type}"
    fi
    set -x
    docker buildx build \
        --pull \
        --cache-from ref=${CACHE_IMAGE_NAME}.${target}-buildcache,type=${cache_type} \
        ${cache_to} \
        --progress plain \
        --target ${target} \
        --tag ${IMAGE_NAME}.${target}:${TAG} \
        .
) 2>&1 | sed -u 's/^/'${target}' | /'
done

# Build runtime image
(
target=runtime
if [[ ${PUSH_CACHE} -eq 1 ]]; then
    cache_to="--cache-to ref=${CACHE_IMAGE_NAME}.${target}-buildcache,mode=max,type=${cache_type}"
fi
set -x
docker buildx build \
    --pull \
    ${load} \
    --cache-from ref=${CACHE_IMAGE_NAME}.base-buildcache,type=${cache_type} \
    --cache-from ref=${CACHE_IMAGE_NAME}.build_py_modules-buildcache,type=${cache_type} \
    --cache-from ref=${CACHE_IMAGE_NAME}.build_gdal-buildcache,type=${cache_type} \
    --cache-from ref=${CACHE_IMAGE_NAME}.build_blender-buildcache,type=${cache_type} \
    --cache-from ref=${CACHE_IMAGE_NAME}.${target}-buildcache,type=${cache_type} \
    ${cache_to} \
    --progress plain \
    --target ${target} \
    --tag ${IMAGE_NAME}:${TAG} \
    .
) 2>&1 | sed -u 's/^/runtime | /'

# Build dev image
(
target=dev
if [[ ${PUSH_CACHE} -eq 1 ]]; then
    cache_to="--cache-to ref=${CACHE_IMAGE_NAME}.${target}-buildcache,mode=max,type=${cache_type}"
fi
set -x
docker buildx build \
    --pull \
    ${load} \
    --cache-from ref=${CACHE_IMAGE_NAME}.base-buildcache,type=${cache_type} \
    --cache-from ref=${CACHE_IMAGE_NAME}.build_py_modules-buildcache,type=${cache_type} \
    --cache-from ref=${CACHE_IMAGE_NAME}.build_gdal-buildcache,type=${cache_type} \
    --cache-from ref=${CACHE_IMAGE_NAME}.build_blender-buildcache,type=${cache_type} \
    --cache-from ref=${CACHE_IMAGE_NAME}.runtime-buildcache,type=${cache_type} \
    --cache-from ref=${CACHE_IMAGE_NAME}.${target}-buildcache,type=${cache_type} \
    ${cache_to} \
    --progress plain \
    --target ${target} \
    --tag ${IMAGE_NAME}.${target}:${TAG} \
    .
) 2>&1 | sed -u 's/^/dev | /'
