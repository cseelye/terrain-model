#!/usr/bin/env bash
set -euo pipefail
NAME=${NAME:-terrain-model}
REPO=${REPO:-ghcr.io/cseelye}
TAG=${TAG-latest}
CACHE_REPO=${CACHE_REPO:-ghcr.io/cseelye}
TARGETS=${TARGETS-}
LOAD=${LOAD:-0}
PUSH_CACHE=${PUSH_CACHE:-0}

if [[ -n ${REPO} ]]; then
    IMAGE_NAME=${REPO}/${NAME}
else
    IMAGE_NAME=${NAME}
fi

if [[ -n ${CACHE_REPO} ]]; then
    CACHE_IMAGE_NAME=${CACHE_REPO}/${NAME}
elif [[ -n ${REPO} ]]; then
    CACHE_IMAGE_NAME=${REPO}:${NAME}
else
    echo "CACHE_REPO and REPO cannot both be empty"
    exit 1
fi

load=""
if [[ ${LOAD} -eq 1 ]]; then
    load="--load"
fi

all_targets=( $(perl -ne 'print "$1\n" if /FROM \S+ AS (\S+)/s' Dockerfile) )

if [[ -z ${TARGETS} ]]; then
    TARGETS=("${all_targets[@]}")
else
    TARGETS=(${TARGETS})
fi


# This build process uses buildx remote layer caching, so docker must be logged into the registry being used with permissions to pull and push
cache_to=""

# Build cache-from args so each build can pull from every cache layer
# Normally this is only useful when the cache is incomplete
cache_from=""
for target in ${all_targets[@]}; do
    cache_from="${cache_from} \
        --cache-from type=registry,ref=${CACHE_IMAGE_NAME}.${target}-buildcache"
done

# Explicitly build/tag all targets
echo "Building targets ${TARGETS[@]}"
for target in ${TARGETS[@]}; do
(
    if [[ ${PUSH_CACHE} -eq 1 ]]; then
        cache_to="--cache-to type=registry,ref=${CACHE_IMAGE_NAME}.${target}-buildcache,mode=max"
    fi
    fullname=${IMAGE_NAME}.${target}:${TAG}
    if [[ ${target} == "prod" ]]; then
        fullname=${IMAGE_NAME}:${TAG}
    fi
    set -x
    docker buildx build \
        ${load} \
        ${cache_from} \
        ${cache_to} \
        --progress plain \
        --target ${target} \
        --tag ${fullname} \
        .
)
done
