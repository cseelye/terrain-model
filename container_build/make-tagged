#!/usr/bin/env bash
set -euo pipefail
CORES=${CORES-$(getconf _NPROCESSORS_ONLN)}
NAME=${NAME:-terrain-model}
REPO=${REPO-ghcr.io/cseelye} # Allow this to be empty
if [[ -n ${REPO} ]]; then
    IMAGE_NAME=${REPO}/${NAME}
else
    IMAGE_NAME=${NAME}
fi
USE_BUILDX=${USE_BUILDX-0}
if [[ ${USE_BUILDX} -eq 1 ]]; then
    BUILD_COMMAND="buildx build --load"
else
    BUILD_COMMAND="image build"
fi

for stage in base build_gdal build_blender build_py_modules; do
    ( set -x; docker image pull ${IMAGE_NAME}.${stage} ) || true
done
if docker image pull ${IMAGE_NAME}; then
    docker image tag ${IMAGE_NAME} ${IMAGE_NAME}.prod
else
    true
fi

(
set -x
docker ${BUILD_COMMAND} \
    --cache-from ${IMAGE_NAME}.base \
    --cache-from ${IMAGE_NAME}.build_gdal \
    --cache-from ${IMAGE_NAME}.build_blender \
    --cache-from ${IMAGE_NAME}.build_py_modules \
    --cache-from ${IMAGE_NAME}.prod \
    --build-arg CORES=${CORES} \
    --progress plain \
    --target prod \
    --tag ${IMAGE_NAME}.prod \
    .
)

(
set -x
docker ${BUILD_COMMAND} \
    --cache-from ${IMAGE_NAME}.base \
    --cache-from ${IMAGE_NAME}.build_gdal \
    --cache-from ${IMAGE_NAME}.build_blender \
    --cache-from ${IMAGE_NAME}.build_py_modules \
    --cache-from ${IMAGE_NAME}.prod \
    --cache-from ${IMAGE_NAME}.dev \
    --build-arg CORES=${CORES} \
    --progress plain \
    --target dev \
    --tag ${IMAGE_NAME}.dev \
    .
)

# Explicitly tag the intermediate layers
for stage in base build_gdal build_blender build_py_modules; do
(
    set -x
    docker ${BUILD_COMMAND} \
        --cache-from ${IMAGE_NAME}.base \
        --cache-from ${IMAGE_NAME}.build_gdal \
        --cache-from ${IMAGE_NAME}.build_blender \
        --cache-from ${IMAGE_NAME}.build_py_modules \
        --build-arg CORES=${CORES} \
        --progress plain \
        --target ${stage} \
        --tag ${IMAGE_NAME}.${stage} \
        .
)
done
docker image tag ${IMAGE_NAME}.prod ${IMAGE_NAME}
